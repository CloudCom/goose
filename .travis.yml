language: go

go:
  - 1.5
  - 1.4
  - tip

matrix:
  allow_failures:
    - go: tip
  fast_finish: true

services:
  - mysql
  - postgresql

before_install:
  - go get github.com/axw/gocov/gocov
  - go get github.com/mattn/goveralls
  # install linting tools
  - go get golang.org/x/lint/golint
  - go get golang.org/x/tools/cmd/vet
  - go get github.com/fzipp/gocyclo

install:
  - go get -t -d ./...

before_script:
  - psql -U postgres -c 'CREATE DATABASE goose'
  - export POSTGRES_DATABASE_DSN='host=localhost sslmode=disable user=postgres dbname=goose'
  - mysql -u root -e 'CREATE DATABASE goose'
  - export MYSQL_DATABASE_DSN='root@tcp(localhost:3306)/goose'
  - |
    if [[ -n "$REDSHIFT_DATABASE_DSN" ]]; then
      export "$(go run travis.setup_redshift.go setup)" && \
        trap "go run travis.setup_redshift.go destroy" EXIT
    fi

script:
  # check for potentially complex functions
  - "gocyclo -over 15 . ||:"
  # check possible styling errors
  - "golint ./... ||:"
  # make sure code is properly formatted and simplified
  - test -z "$(gofmt -d . | tee /dev/stderr)"
  # check for possible uh ohs
  - go vet ./...
  # make sure generated files have already been committed
  - go generate ./... && test -z "$(git status --porcelain)"
  - go build -i ./...
  # run tests checking for race conditions
  - go list ./... | xargs -n 1 go test -v -race -coverprofile=>(sed -e '1!{/^mode:/d}' > .coverprofile)

after_script:
  - goveralls -coverprofile=.coverprofile

after_success:
  - |
    if [[ "$TRAVIS_PULL_REQUEST" == "false" ]] && [[ "$TRAVIS_BRANCH" == "master" ]]; then
      go list ./... | xargs -n 1 -I{} curl http://godoc.org/-/refresh -d path={}
    fi
